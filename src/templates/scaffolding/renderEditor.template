<% import grails.persistence.Event %>
<%  if (property.type == Boolean || property.type == boolean)
        out << renderBooleanEditor(domainClass, property)
    else if (property.type && Number.isAssignableFrom(property.type) || (property.type?.isPrimitive() && property.type != boolean))
        out << renderNumberEditor(domainClass, property)
    else if (property.type == String)
        out << renderStringEditor(domainClass, property)
    else if (property.type == Date || property.type == java.sql.Date || property.type == java.sql.Time || property.type == Calendar)
        out << renderDateEditor(domainClass, property)
    else if (property.type == URL)
        out << renderStringEditor(domainClass, property)
    else if (property.type && property.isEnum())
        out << renderEnumEditor(domainClass, property)
    else if (property.type == TimeZone)
        out << renderSelectTypeEditor("timeZone", domainClass, property)
    else if (property.type == Locale)
        out << renderSelectTypeEditor("locale", domainClass, property)
    else if (property.type == Currency)
        out << renderSelectTypeEditor("currency", domainClass, property)
    else if (property.type==([] as Byte[]).class) //TODO: Bug in groovy means i have to do this :(
        out << renderByteArrayEditor(domainClass, property)
    else if (property.type==([] as byte[]).class) //TODO: Bug in groovy means i have to do this :(
        out << renderByteArrayEditor(domainClass, property)
    else if (property.manyToOne || property.oneToOne)
        out << renderManyToOne(domainClass, property)
    else if ((property.oneToMany && !property.bidirectional) || (property.manyToMany && property.isOwningSide())) {
        def str = renderManyToMany(domainClass, property)
        if(str != null) {
            out << str
        }
    }
    else if (property.oneToMany)
        out << renderOneToMany(domainClass, property)

    private renderEnumEditor(domainClass, property) {
		def sb = new StringBuilder("")
        sb << '<g:select name="' << property.name << '"'
 		sb << ' from="${' << "${property.type.name}?.values()" << '}"'
 		sb << ' keys="${' << property.type.name << '.values()*.name()}"'
		if (isRequired()) sb << ' required=""'
		sb << ' value="${' << "${domainInstance}?.${property.name}?.name()" << '}"'
		sb << renderNoSelection(property)
		sb << '/>'
		sb as String
    }
    //println "Propiedad: >>>>" + property
    //println "tipo propiedad: >>>" + property.type
    //println "Domain class: >>>>" + domainClass

    private renderStringEditor(domainClass, property) {
        if (!cp) {
            return "<g:textField name=\"${property.name}\" value=\"\${${domainInstance}?.${property.name}}\" />"
        } else {
			def sb = new StringBuilder("")
            if ("textarea" == cp.widget || (cp.maxSize > 250 && !cp.password && !cp.inList)) {
                sb << '<g:textArea name="' << property.name << '"'
 				sb << ' cols="40" rows="5"'
				if (cp.maxSize) sb << ' maxlength="' << cp.maxSize << '"'
				if (isRequired()) sb << ' required=""'
 				sb << ' value="${' << "${domainInstance}?.${property.name}" << '}"'
				sb << '/>'
            } else if (cp.inList) {
				sb << '<g:select name="' << property.name << '"'
				sb << ' from="${' << "${domainInstance}.constraints.${property.name}.inList" << '}"'
				if (isRequired()) sb << ' required=""'
				sb << ' value="${' << "${domainInstance}?.${property.name}" << '}"'
				sb << ' valueMessagePrefix="' << "${domainClass.propertyName}.${property.name}" << '"'
				sb << renderNoSelection(property)
				sb << '/>'
			} else {
				if (cp.password) {
					sb << '<g:field type="password"'
				} else if (cp.url) {
					sb << '<g:field type="url"'
				} else if (cp.email) {
					sb << '<g:field type="email"'
				} else {
					sb << '<g:textField'
				}
				sb << ' name="' << property.name << '"'
				if (cp.maxSize) sb << ' maxlength="' << cp.maxSize << '"'
				if (!cp.editable) sb << ' readonly="readonly"'
				if (cp.matches) sb << ' pattern="${' << "${domainInstance}.constraints.${property.name}.matches" << '}"'
				if (isRequired()) sb << ' required=""'
				sb << ' value="${' << "${domainInstance}?.${property.name}" << '}"'
				sb << '/>'
			}
			sb as String
        }
    }

    private renderByteArrayEditor(domainClass, property) {
        return "<input type=\"file\" id=\"${property.name}\" name=\"${property.name}\" />"
    }

    private renderManyToOne(domainClass,property) {
        if (property.association) {
			def sb = new StringBuilder()
            sb << '<g:select'
			// id is "x" and name is "x.id" as the label will have for="x" and "." in an id will confuse CSS
 			sb << ' id="' << property.name << '"'
 			sb << ' name="' << property.name << '.id"'
 			sb << ' from="${' << property.type.name << '.list()}"'
 			sb << ' optionKey="id"'
			if (isRequired()) sb << ' required=""'
 			sb << ' value="${' << "${domainInstance}?.${property.name}" << '?.id}"'
 			sb << ' class="many-to-one"'
 			sb << renderNoSelection(property)
 			sb << '/>'
			sb as String
        }
    }

    private renderManyToMany(domainClass, property) {
        def cls = property.referencedDomainClass?.clazz
        if(cls == null) {
            if(property.type instanceof Collection) {
                cls = org.springframework.core.GenericCollectionTypeResolver.getCollectionType(property.type)
            }
        }

        if(cls != null) {
            def sb = new StringBuilder()
            sb << '<g:select name="' << property.name << '"'
            sb << ' from="${' << cls.name << '.list()}"'
            sb << ' multiple="multiple"'
            sb << ' optionKey="id"'
            sb << ' size="5"'
            if (isRequired()) sb << ' required=""'
            sb << ' value="${' << "${domainInstance}?.${property.name}" << '*.id}"'
            sb << ' class="many-to-many"'
            sb << '/>'
            sb as String

        }

    }

    private renderOneToMany(domainClass, property) {
        def sw = new StringWriter()
        def pw = new PrintWriter(sw)
        pw.println()
        pw.println '<ul class="one-to-many">'
        pw.println "<g:each in=\"\${${domainInstance}?.${property.name}?}\" var=\"${property.name[0]}\">"
        pw.println "<li><g:link controller=\"${property.referencedDomainClass.propertyName}\" action=\"show\" id=\"\${${property.name[0]}.id}\">\${${property.name[0]}?.encodeAsHTML()}</g:link></li>"
        pw.println '</g:each>'
		pw.println '<li class="add">'
		pw.println "Agregar ${property.referencedDomainClass.propertyName} <img id=\"modal-${property.referencedDomainClass.propertyName}\" href=\"#\"  src=\"\${resource(dir: 'images', file: 'writing.png')}\" alt=\"Agregar Pagos\" height=\"30px\" width=\"30px\"> "
        pw.println '</img>'
        pw.println "<div id=\"overlay-${property.referencedDomainClass.propertyName}\">"
        pw.println "<div id=\"overlayContainer-${property.referencedDomainClass.propertyName}\">"
        pw.println '<p>'

        excludedProps = Event.allEvents.toList() << 'version' << 'dateCreated' << 'lastUpdated'
        persistentPropNames = property.referencedDomainClass.persistentProperties*.name
        boolean hasHibernate = pluginManager?.hasGrailsPlugin('hibernate')
        if (hasHibernate && org.codehaus.groovy.grails.orm.hibernate.cfg.GrailsDomainBinder.getMapping(domainClass)?.identity?.generator == 'assigned') {
            persistentPropNames << property.referencedDomainClass.identifier.name
        }
        props = property.referencedDomainClass.properties.findAll { persistentPropNames.contains(it.name) && !excludedProps.contains(it.name) }
        for (p in props) {
            if (p.embedded) {
                def embeddedPropNames = p.component.persistentProperties*.name
                def embeddedProps = p.component.properties.findAll { embeddedPropNames.contains(it.name) && !excludedProps.contains(it.name) }
                pw.println  "<fieldset class=\"embedded\"><legend><g:message code=\"${property.referencedDomainClass.propertyName}.${p.name}.label\" default=\"${p.naturalName}\" /></legend>"  
                for (ep in p.component.properties) {
                     //renderFieldForProperty(ep, p.component, "${p.name}.")
                }
                pw.println '</fieldset>'
            } else {
                if (hasHibernate) {
                    cp = property.referencedDomainClass.constrainedProperties[p.name]
                    display = (cp ? cp.display : true)
                    required = (cp ? !(cp.propertyType in [boolean, Boolean]) && !cp.nullable && (cp.propertyType != String || !cp.blank) : false)
                }
                if (display){
                    prefix = ""
                    pw.println "<div class=\"fieldcontain \${hasErrors(bean: ${property.referencedDomainClass.propertyName}, field: '${prefix}${p.name}', 'error')} ${required ? 'required' : ''} \">"
                    pw.println "<label for=\"${prefix}${p.name}\">"
                    pw.println "<g:message code=\"${domainClass.propertyName}.${prefix}${p.name}.label\" default=\"${p.naturalName}\" />"
                    if(required){
                        pw.print "<span class=\"required-indicator\">*</span>"
                    }
                    pw.println '</label>'
                    pw.println '</div>'
                }
            }
        }
        pw.println '</p>'
        pw.println '</div>'
        pw.println '</div>'
        pw.println '</li>'
        pw.println '</ul>'
        
        pw.println '<g:javascript>'
        pw.println '$(document).ready(function(){'
        pw.println "\$(\"#modal-${property.referencedDomainClass.propertyName}\").click(function(){"
        pw.println "el = document.getElementById('overlay-${property.referencedDomainClass.propertyName}');"
        pw.println "el.style.visibility = (el.style.visibility == \"visible\") ? \"hidden\" : \"visible\";"
        pw.println '});'
        pw.println '});'
        pw.println '</g:javascript>'
        return sw.toString()
    }




    private renderNumberEditor(domainClass, property) {
        if (!cp) {
            if (property.type == Byte) {
                return "<g:select name=\"${property.name}\" from=\"\${-128..127}\" class=\"range\" value=\"\${fieldValue(bean: ${domainInstance}, field: '${property.name}')}\" />"
            } else {
                return "<g:field type=\"number\" name=\"${property.name}\" value=\"\${${domainInstance}.${property.name}}\" />"
            }
        } else {
	        def sb = new StringBuilder()
            if (cp.range) {
                sb << '<g:select name="' << property.name << '"'
 				sb << ' from="${' << "${cp.range.from}..${cp.range.to}" << '}"'
 				sb << ' class="range"'
				if (isRequired()) sb << ' required=""'
				sb << ' value="${' << "fieldValue(bean: ${domainInstance}, field: '${property.name}')" << '}"'
				sb << renderNoSelection(property)
				sb << '/>'
            } else if (cp.inList) {
                sb << '<g:select name="' << property.name << '"'
 				sb << ' from="${' << "${domainInstance}.constraints.${property.name}.inList" << '}"'
				if (isRequired()) sb << ' required=""'
				sb << ' value="${' << "fieldValue(bean: ${domainInstance}, field: '${property.name}')" << '}"'
				sb << ' valueMessagePrefix="' << "${domainClass.propertyName}.${property.name}" << '"'
				sb << renderNoSelection(property)
				sb << '/>'
            } else {
				sb << '<g:field'
				sb << ' name="' << property.name << '"'
				if (property.type in [float, double, Float, Double, BigDecimal]) {
					sb << ' value="${' << "fieldValue(bean: ${domainInstance}, field: '${property.name}')" << '}"'
				} else {
					sb << ' type="number"'
					if (cp.min != null) sb << ' min="' << cp.min << '"'
					if (cp.max != null) sb << ' max="' << cp.max << '"'
					sb << ' value="${' << domainInstance << '.' << property.name << '}"'
				}
				if (isRequired()) sb << ' required=""'
				sb << '/>'
            }
			sb as String
        }
     }

    private renderBooleanEditor(domainClass, property) {
        if (!cp) {
            return "<g:checkBox name=\"${property.name}\" value=\"\${${domainInstance}?.${property.name}}\" />"
        } else {
            def sb = new StringBuilder("<g:checkBox name=\"${property.name}\" ")
            if (cp.widget) sb << "widget=\"${cp.widget}\" ";
            cp.attributes.each { k, v ->
                sb << "${k}=\"${v}\" "
            }
            sb << "value=\"\${${domainInstance}?.${property.name}}\" />"
            return sb.toString()
        }
    }

    private renderDateEditor(domainClass, property) {
        def precision = (property.type == Date || property.type == java.sql.Date || property.type == Calendar) ? "day" : "minute";
        if (!cp) {
            return "<g:datePicker name=\"${property.name}\" precision=\"${precision}\" value=\"\${${domainInstance}?.${property.name}}\" />"
        } else {
            if (!cp.editable) {
                return "\${${domainInstance}?.${property.name}?.toString()}"
            } else {
                def sb = new StringBuilder("<g:datePicker name=\"${property.name}\" ")
                if (cp.format) sb << "format=\"${cp.format}\" "
                if (cp.widget) sb << "widget=\"${cp.widget}\" "
                cp.attributes.each { k, v ->
                    sb << "${k}=\"${v}\" "
                }
                if (!cp.attributes.precision){
                    sb << "precision=\"${precision}\" "
                }
                sb << " value=\"\${${domainInstance}?.${property.name}}\" ${renderNoSelection(property)} />"

                return sb.toString()
            }
        }
    }

    private renderSelectTypeEditor(type, domainClass,property) {
        if (!cp) {
            return "<g:${type}Select name=\"${property.name}\" value=\"\${${domainInstance}?.${property.name}}\" />"
        } else {
            def sb = new StringBuilder("<g:${type}Select name=\"${property.name}\" ")
            if (cp.widget) sb << "widget=\"${cp.widget}\" ";
            cp.attributes.each { k, v ->
                sb << "${k}=\"${v}\" "
            }
            sb << "value=\"\${${domainInstance}?.${property.name}}\" ${renderNoSelection(property)} />"
            return sb.toString()
        }
    }

    private renderNoSelection(property) {
        if (isOptional()) {
            if (property.manyToOne || property.oneToOne) {
                return " noSelection=\"['null': '']\""
            } else if (property.type == Date || property.type == java.sql.Date || property.type == java.sql.Time || property.type == Calendar) {
                return "default=\"none\" noSelection=\"['': '']\""
            } else {
                return " noSelection=\"['': '']\""
            }
        }
        return ""
    }

	private boolean isRequired() {
		!isOptional()
	}

	private boolean isOptional() {
	    if(!cp) {
	        return false
	    }
	    else {
	        cp.nullable || (cp.propertyType == String && cp.blank) || cp.propertyType in [boolean, Boolean]
	    }
	}
%>